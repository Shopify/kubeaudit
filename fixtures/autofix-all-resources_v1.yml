# This is a test yaml file
# to be autofixed

%YAML   1.1
%TAG    !   !foo
%TAG    !yaml!  tag:yaml.org,2002:

---

apiVersion: apps/v1 # The latest api version for Deployment
# This is a deployment
kind: Deployment
metadata:
  creationTimestamp: null # This is autopopulated
  name: cababilitiesAdded # capabilitiesAdded comment
  namespace: fakeDeploymentSC
spec:
  strategy: {}
  template:
    metadata:
      creationTimestamp: null # This is also autopopulated
      labels:
        apps: fakeSecurityContext
    spec:
      containers:
      - name: fakeContainerSC1  # map list item comment
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - AUDIT_WRITE # string list item comment
      - name: fakeContainerSC2

# Post doc comment

---

apiVersion: v1
kind: Namespace
metadata:
  name: default
  creationTimestamp: null
spec: {}
status: {}

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app: testapp
    env: production
    name: jobs
  name: testapp
spec:
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app: testapp
            env: production
            name: testapp
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: role
                    operator: In
                    values:
                    - testapp
          automountServiceAccountToken: false
          containers:
          - env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/run/gcloud/key
            image: gcr.io/docker-image/testapp:<%= current_sha %>
            args: ["gcr.io/docker-images"]
            name: jobs
            resources:
              limits:
                cpu: "1"
                memory: 10Gi
              requests:
                cpu: "1"
                memory: 10Gi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - AUDIT_WRITE
                - CHOWN
                - DAC_OVERRIDE
                - FOWNER
                - FSETID
                - KILL
                - MKNOD
                - NET_BIND_SERVICE
                - NET_RAW
                - SETFCAP
                - SETGID
                - SETPCAP
                - SETUID
                - SYS_CHROOT
              privileged: false
              readOnlyRootFilesystem: false
              runAsNonRoot: true
            volumeMounts:
            - name: google-service-account
              mountPath: "/var/run/gcloud"
              readOnly: true
          restartPolicy: Never
          tolerations:
            - key: "app"
              operator: "Equal"
              value: "testapp"
              effect: "NoExecute"
          volumes:
          - name: google-service-account
            secret:
              secretName: service-account-key
  schedule: 30 13 * * 1-5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: fakeDeploymentImg1
  namespace: fakeDeploymentImg
spec:
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        apps: fakeImage
    spec:
      # Trust me the following line is longer than 80 characters
      containers:
      - image: gcr.io/docker-images-directory/apps/production/fake-image-app:<%= current_sha %>
        name: fakeContainerImg
        resources: {}
status: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "false"
  labels:
    name: web
    app: testApp
    env: production
spec:
  tls:
  - hosts:
    - testapp.shopifycloud.com
    - testapp.shopifyapps.com
    secretName: someSecret
  rules:
  - host: testapp.shopifycloud.com # comment 2
    http: # comment 2
      paths: # comment 2
      - backend: # comment 2
          serviceName: web # comment 2
          servicePort: 80 # comment 2
  - host: testapp.shopifyapps.com # comment
    http: # comment
      paths: # comment
      - backend: # comment
          serviceName: web # comment
          servicePort: 80 # comment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: fakeDeploymentImg1
  namespace: fakeDeploymentImg
spec:
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        apps: fakeImage
      annotations:
        container.apparmor.security.beta.kubernetes.io/fakeContainerImg: runtime/default
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
    spec:
      containers:
      # This is a comment
      - image: gcr.io/docker-images-directory/apps/
        name: fakeContainerImg
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - NET_RAW
            - SETFCAP
            - SETGID
            - SETPCAP
            - SETUID
            - SYS_CHROOT
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      automountServiceAccountToken: false
  selector: null
status: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"] # 1
  verbs: ["get", "watch", "list"] # 2
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: v1
kind: PodTemplate
metadata:
  name: pod-template
  labels:
    name: pod-template
    app: foobar
    env: production
template:
  metadata:
    name: pod-template
    labels:
      name: pod-template
      app: foobar
      env: production
  spec:
    restartPolicy: Never
    containers:
    - name: pod
      image: gcr.io/production/foobar:tag
